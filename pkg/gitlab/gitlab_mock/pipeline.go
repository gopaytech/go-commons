// Code generated by mockery v2.14.0. DO NOT EDIT.

package gitlab_mock

import (
	gitlab "github.com/gopaytech/go-commons/pkg/gitlab"
	go_gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// Pipeline is an autogenerated mock type for the Pipeline type
type Pipeline struct {
	mock.Mock
}

// GetBySHA provides a mock function with given fields: projectId, sha
func (_m *Pipeline) GetBySHA(projectId gitlab.NameOrId, sha string) ([]go_gitlab.PipelineInfo, error) {
	ret := _m.Called(projectId, sha)

	var r0 []go_gitlab.PipelineInfo
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string) []go_gitlab.PipelineInfo); ok {
		r0 = rf(projectId, sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]go_gitlab.PipelineInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string) error); ok {
		r1 = rf(projectId, sha)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySHAAndRef provides a mock function with given fields: projectId, sha, ref
func (_m *Pipeline) GetBySHAAndRef(projectId gitlab.NameOrId, sha string, ref string) ([]go_gitlab.PipelineInfo, error) {
	ret := _m.Called(projectId, sha, ref)

	var r0 []go_gitlab.PipelineInfo
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string, string) []go_gitlab.PipelineInfo); ok {
		r0 = rf(projectId, sha, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]go_gitlab.PipelineInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string, string) error); ok {
		r1 = rf(projectId, sha, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySHAOnDefault provides a mock function with given fields: projectId, sha
func (_m *Pipeline) GetBySHAOnDefault(projectId gitlab.NameOrId, sha string) ([]go_gitlab.PipelineInfo, error) {
	ret := _m.Called(projectId, sha)

	var r0 []go_gitlab.PipelineInfo
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string) []go_gitlab.PipelineInfo); ok {
		r0 = rf(projectId, sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]go_gitlab.PipelineInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string) error); ok {
		r1 = rf(projectId, sha)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPipeline interface {
	mock.TestingT
	Cleanup(func())
}

// NewPipeline creates a new instance of Pipeline. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPipeline(t mockConstructorTestingTNewPipeline) *Pipeline {
	mock := &Pipeline{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
