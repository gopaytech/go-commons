// Code generated by mockery v2.20.0. DO NOT EDIT.

package gitlab_mock

import (
	gitlab "github.com/gopaytech/go-commons/pkg/gitlab"
	go_gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryFile is an autogenerated mock type for the RepositoryFile type
type RepositoryFile struct {
	mock.Mock
}

// GetFileByPath provides a mock function with given fields: pid, path, ref
func (_m *RepositoryFile) GetFileByPath(pid gitlab.NameOrId, path string, ref string) (*go_gitlab.File, error) {
	ret := _m.Called(pid, path, ref)

	var r0 *go_gitlab.File
	var r1 error
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string, string) (*go_gitlab.File, error)); ok {
		return rf(pid, path, ref)
	}
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string, string) *go_gitlab.File); ok {
		r0 = rf(pid, path, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.File)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string, string) error); ok {
		r1 = rf(pid, path, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRawFileByPath provides a mock function with given fields: pid, path, ref
func (_m *RepositoryFile) GetRawFileByPath(pid gitlab.NameOrId, path string, ref string) ([]byte, error) {
	ret := _m.Called(pid, path, ref)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string, string) ([]byte, error)); ok {
		return rf(pid, path, ref)
	}
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string, string) []byte); ok {
		r0 = rf(pid, path, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string, string) error); ok {
		r1 = rf(pid, path, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositoryFile interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryFile creates a new instance of RepositoryFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryFile(t mockConstructorTestingTNewRepositoryFile) *RepositoryFile {
	mock := &RepositoryFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
