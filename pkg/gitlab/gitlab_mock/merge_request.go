// Code generated by mockery v2.14.0. DO NOT EDIT.

package gitlab_mock

import (
	gitlab "github.com/gopaytech/go-commons/pkg/gitlab"
	go_gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// MergeRequest is an autogenerated mock type for the MergeRequest type
type MergeRequest struct {
	mock.Mock
}

// Accept provides a mock function with given fields: projectId, mergeRequestID, removeBranch
func (_m *MergeRequest) Accept(projectId gitlab.NameOrId, mergeRequestID int, removeBranch bool) (*go_gitlab.MergeRequest, error) {
	ret := _m.Called(projectId, mergeRequestID, removeBranch)

	var r0 *go_gitlab.MergeRequest
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, int, bool) *go_gitlab.MergeRequest); ok {
		r0 = rf(projectId, mergeRequestID, removeBranch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.MergeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, int, bool) error); ok {
		r1 = rf(projectId, mergeRequestID, removeBranch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Approve provides a mock function with given fields: projectId, mergeRequestID
func (_m *MergeRequest) Approve(projectId gitlab.NameOrId, mergeRequestID int) error {
	ret := _m.Called(projectId, mergeRequestID)

	var r0 error
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, int) error); ok {
		r0 = rf(projectId, mergeRequestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields: projectId, mergeRequestID
func (_m *MergeRequest) Close(projectId gitlab.NameOrId, mergeRequestID int) error {
	ret := _m.Called(projectId, mergeRequestID)

	var r0 error
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, int) error); ok {
		r0 = rf(projectId, mergeRequestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: projectId, sourceBranch, targetBranch, title
func (_m *MergeRequest) Create(projectId gitlab.NameOrId, sourceBranch string, targetBranch string, title string) (*go_gitlab.MergeRequest, error) {
	ret := _m.Called(projectId, sourceBranch, targetBranch, title)

	var r0 *go_gitlab.MergeRequest
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string, string, string) *go_gitlab.MergeRequest); ok {
		r0 = rf(projectId, sourceBranch, targetBranch, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.MergeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string, string, string) error); ok {
		r1 = rf(projectId, sourceBranch, targetBranch, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToDefault provides a mock function with given fields: projectId, sourceBranch, title
func (_m *MergeRequest) CreateToDefault(projectId gitlab.NameOrId, sourceBranch string, title string) (*go_gitlab.MergeRequest, error) {
	ret := _m.Called(projectId, sourceBranch, title)

	var r0 *go_gitlab.MergeRequest
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string, string) *go_gitlab.MergeRequest); ok {
		r0 = rf(projectId, sourceBranch, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.MergeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string, string) error); ok {
		r1 = rf(projectId, sourceBranch, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: projectId, mergeRequestId
func (_m *MergeRequest) Get(projectId gitlab.NameOrId, mergeRequestId int) (*go_gitlab.MergeRequest, error) {
	ret := _m.Called(projectId, mergeRequestId)

	var r0 *go_gitlab.MergeRequest
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, int) *go_gitlab.MergeRequest); ok {
		r0 = rf(projectId, mergeRequestId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.MergeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, int) error); ok {
		r1 = rf(projectId, mergeRequestId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMergeRequest interface {
	mock.TestingT
	Cleanup(func())
}

// NewMergeRequest creates a new instance of MergeRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMergeRequest(t mockConstructorTestingTNewMergeRequest) *MergeRequest {
	mock := &MergeRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
