// Code generated by mockery v2.28.1. DO NOT EDIT.

package gitlab_mock

import (
	gitlab "github.com/gopaytech/go-commons/pkg/gitlab"
	go_gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// Project is an autogenerated mock type for the Project type
type Project struct {
	mock.Mock
}

// CreateMinimalMRApproval provides a mock function with given fields: id, minimalApproval
func (_m *Project) CreateMinimalMRApproval(id gitlab.NameOrId, minimalApproval int) (*go_gitlab.Project, error) {
	ret := _m.Called(id, minimalApproval)

	var r0 *go_gitlab.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, int) (*go_gitlab.Project, error)); ok {
		return rf(id, minimalApproval)
	}
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, int) *go_gitlab.Project); ok {
		r0 = rf(id, minimalApproval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, int) error); ok {
		r1 = rf(id, minimalApproval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: name, parentID, visibility, defaultBranch
func (_m *Project) CreateProject(name string, parentID int, visibility go_gitlab.VisibilityValue, defaultBranch string) (*go_gitlab.Project, error) {
	ret := _m.Called(name, parentID, visibility, defaultBranch)

	var r0 *go_gitlab.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, go_gitlab.VisibilityValue, string) (*go_gitlab.Project, error)); ok {
		return rf(name, parentID, visibility, defaultBranch)
	}
	if rf, ok := ret.Get(0).(func(string, int, go_gitlab.VisibilityValue, string) *go_gitlab.Project); ok {
		r0 = rf(name, parentID, visibility, defaultBranch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, go_gitlab.VisibilityValue, string) error); ok {
		r1 = rf(name, parentID, visibility, defaultBranch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *Project) Get(id gitlab.NameOrId) (*go_gitlab.Project, error) {
	ret := _m.Called(id)

	var r0 *go_gitlab.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId) (*go_gitlab.Project, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId) *go_gitlab.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.NameOrId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBranchByName provides a mock function with given fields: id, name
func (_m *Project) GetBranchByName(id gitlab.NameOrId, name string) (*go_gitlab.Branch, error) {
	ret := _m.Called(id, name)

	var r0 *go_gitlab.Branch
	var r1 error
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string) (*go_gitlab.Branch, error)); ok {
		return rf(id, name)
	}
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string) *go_gitlab.Branch); ok {
		r0 = rf(id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string) error); ok {
		r1 = rf(id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultBranch provides a mock function with given fields: id
func (_m *Project) GetDefaultBranch(id gitlab.NameOrId) (*go_gitlab.Branch, error) {
	ret := _m.Called(id)

	var r0 *go_gitlab.Branch
	var r1 error
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId) (*go_gitlab.Branch, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId) *go_gitlab.Branch); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(gitlab.NameOrId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProject interface {
	mock.TestingT
	Cleanup(func())
}

// NewProject creates a new instance of Project. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProject(t mockConstructorTestingTNewProject) *Project {
	mock := &Project{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
