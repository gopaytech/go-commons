// Code generated by mockery v2.9.4. DO NOT EDIT.

package gitlab_mock

import (
	gitlab "github.com/gopaytech/go-commons/pkg/gitlab"
	go_gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// Search is an autogenerated mock type for the Search type
type Search struct {
	mock.Mock
}

// ProjectsByGroup provides a mock function with given fields: parent, name
func (_m *Search) ProjectsByGroup(parent gitlab.NameOrId, name string) ([]*go_gitlab.Project, *go_gitlab.Response, error) {
	ret := _m.Called(parent, name)

	var r0 []*go_gitlab.Project
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string) []*go_gitlab.Project); ok {
		r0 = rf(parent, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*go_gitlab.Project)
		}
	}

	var r1 *go_gitlab.Response
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string) *go_gitlab.Response); ok {
		r1 = rf(parent, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*go_gitlab.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(gitlab.NameOrId, string) error); ok {
		r2 = rf(parent, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
